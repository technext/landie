{"version":3,"sources":["utils.js","live-config.js","detector.js","node.js","anchor.js","choices.js","kanban.js","live-demo-mode.js","navbar-combo.js","navbar-darken-on-scroll.js","navbar-top.js","navbar-vertical.js","popover.js","progress.js","scroll-to-top.js","tooltip.js","wizard.js"],"names":["buttonGroups","docReady","fn","document","readyState","addEventListener","setTimeout","resize","window","isIterableArray","array","Array","isArray","length","camelize","str","text","replace","_","c","toUpperCase","concat","substr","toLowerCase","getData","el","data","JSON","parse","dataset","e","hexToRgb","hexValue","hex","indexOf","substring","result","exec","m","r","g","b","parseInt","rgbaColor","alpha","arguments","undefined","colors","primary","secondary","success","info","warning","danger","light","dark","grays","white","100","200","300","400","500","600","700","800","900","1000","1100","black","hasClass","className","classList","value","includes","addClass","add","getOffset","rect","getBoundingClientRect","scrollLeft","pageXOffset","documentElement","scrollTop","pageYOffset","top","left","isScrolledIntoView","offsetTop","offsetLeft","width","offsetWidth","height","offsetHeight","offsetParent","all","innerHeight","innerWidth","partial","breakpoints","xs","sm","md","lg","xl","xxl","getBreakpoint","breakpoint","classes","split","filter","cls","pop","setCookie","name","expire","expires","Date","setTime","getTime","cookie","toUTCString","getCookie","keyValue","match","settings","tinymce","theme","chart","borderColor","newChart","config","ctx","getContext","Chart","getItemFromStore","key","defaultValue","store","localStorage","getItem","_unused","setItemToStore","payload","setItem","getStoreSpace","parseFloat","escape","encodeURIComponent","stringify","toFixed","utils","isFluid","isRTL","navbarPosition","navbarStyle","setCheckInputValue","id","input","getElementById","checked","querySelector","querySelectorAll","forEach","setAttribute","storage","detectorInit","is","html","opera","mobile","firefox","safari","ios","iphone","ipad","ie","edge","chrome","mac","windows","navigator","userAgent","Node","node","_classCallCheck","this","isValidNode","remove","toggle","contains","removeAttribute","event","cb","anchors","AnchorJS","options","icon","choicesInit","Choices","item","userOptions","_objectSpread","itemSelectText","kanbanInit","Selectors","ClassNames","Events","addCardButtons","formHideButtons","addListForm","collapseDismissButtons","button","_ref","column","currentTarget","closest","container","scrollHeight","focus","scrollTo","_ref2","_ref3","nextElement","nextElementSibling","_ref4","_ref5","collapseElement","collapse","bootstrap","Collapse","getInstance","hide","toggleLayout","location","reload","toggleNavbar","selector","navbarComboInit","moveNavContent","windowWidth","navbarCollapse","navbarTopContent","targetID","targetElement","navbarNav","moveableContainer","navbarVerticalBreakpoint","navbarVertical","navbarTopBreakpoint","navbarTopCombo","Selector","innerHTML","insertAdjacentHTML","ClassName","navbarDarkenOnScroll","windowHeight","allColors","colorName","color","bgClassName","colorRgb","backgroundImage","transition","navbar","Object","keys","getComputedStyle","style","backgroundColor","breakPoint","navbarTopDropShadow","setDropShadow","$elem","navDropShadowFlag","$navbar","$navbarVertical","$navbarVerticalContent","$navbarVerticalCollapse","outerWidth","handleNavbarVerticalCollapsed","navbarVerticalToggle","navbarVerticalCollapse","isNavbarVerticalCollapsed","CustomEvent","dispatchEvent","popoverInit","slice","call","map","popoverTriggerEl","Popover","trigger","progressAnimationToggle","progress","progressID","scrollToTop","anchor","_utils$getData","preventDefault","target","getAttribute","scroll","behavior","hash","tooltipInit","tooltipTriggerEl","Tooltip","wizardInit","nextButton","prevButton","cardFooter","count","tabEl","Tab","show","index","tab","i","j"],"mappings":"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","file":"theme.min.js","sourcesContent":["/* -------------------------------------------------------------------------- */\r\n/*                                    Utils                                   */\r\n/* -------------------------------------------------------------------------- */\r\nconst docReady = (fn) => {\r\n  // see if DOM is already available\r\n  if (document.readyState === \"loading\") {\r\n    document.addEventListener(\"DOMContentLoaded\", fn);\r\n  } else {\r\n    setTimeout(fn, 1);\r\n  }\r\n};\r\n\r\nconst resize = (fn) => window.addEventListener(\"resize\", fn);\r\n\r\nconst isIterableArray = (array) => Array.isArray(array) && !!array.length;\r\n\r\nconst camelize = (str) => {\r\n  const text = str.replace(/[-_\\s.]+(.)?/g, (_, c) =>\r\n    c ? c.toUpperCase() : \"\"\r\n  );\r\n  return `${text.substr(0, 1).toLowerCase()}${text.substr(1)}`;\r\n};\r\n\r\nconst getData = (el, data) => {\r\n  try {\r\n    return JSON.parse(el.dataset[camelize(data)]);\r\n  } catch (e) {\r\n    return el.dataset[camelize(data)];\r\n  }\r\n};\r\n\r\n/* ----------------------------- Colors function ---------------------------- */\r\n\r\nconst hexToRgb = (hexValue) => {\r\n  let hex;\r\n  hexValue.indexOf(\"#\") === 0\r\n    ? (hex = hexValue.substring(1))\r\n    : (hex = hexValue);\r\n  // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\r\n  const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\r\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(\r\n    hex.replace(shorthandRegex, (m, r, g, b) => r + r + g + g + b + b)\r\n  );\r\n  return result\r\n    ? [\r\n        parseInt(result[1], 16),\r\n        parseInt(result[2], 16),\r\n        parseInt(result[3], 16),\r\n      ]\r\n    : null;\r\n};\r\n\r\nconst rgbaColor = (color = \"#fff\", alpha = 0.5) =>\r\n  `rgba(${hexToRgb(color)}, ${alpha})`;\r\n\r\n/* --------------------------------- Colors --------------------------------- */\r\n\r\nconst colors = {\r\n  primary: \"#2c7be5\",\r\n  secondary: \"#748194\",\r\n  success: \"#00d27a\",\r\n  info: \"#27bcfd\",\r\n  warning: \"#f5803e\",\r\n  danger: \"#e63757\",\r\n  light: \"#f9fafd\",\r\n  dark: \"#0b1727\",\r\n};\r\n\r\nconst grays = {\r\n  white: \"#fff\",\r\n  100: \"#f9fafd\",\r\n  200: \"#edf2f9\",\r\n  300: \"#d8e2ef\",\r\n  400: \"#b6c1d2\",\r\n  500: \"#9da9bb\",\r\n  600: \"#748194\",\r\n  700: \"#5e6e82\",\r\n  800: \"#4d5969\",\r\n  900: \"#344050\",\r\n  1000: \"#232e3c\",\r\n  1100: \"#0b1727\",\r\n  black: \"#000\",\r\n};\r\n\r\nconst hasClass = (el, className) => {\r\n  !el && false;\r\n  return el.classList.value.includes(className);\r\n};\r\n\r\nconst addClass = (el, className) => {\r\n  el.classList.add(className);\r\n};\r\n\r\nconst getOffset = (el) => {\r\n  const rect = el.getBoundingClientRect();\r\n  const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;\r\n  const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\r\n  return { top: rect.top + scrollTop, left: rect.left + scrollLeft };\r\n};\r\n\r\nconst isScrolledIntoView = (el) => {\r\n  let top = el.offsetTop;\r\n  let left = el.offsetLeft;\r\n  const width = el.offsetWidth;\r\n  const height = el.offsetHeight;\r\n\r\n  while (el.offsetParent) {\r\n    // eslint-disable-next-line no-param-reassign\r\n    el = el.offsetParent;\r\n    top += el.offsetTop;\r\n    left += el.offsetLeft;\r\n  }\r\n\r\n  return {\r\n    all:\r\n      top >= window.pageYOffset &&\r\n      left >= window.pageXOffset &&\r\n      top + height <= window.pageYOffset + window.innerHeight &&\r\n      left + width <= window.pageXOffset + window.innerWidth,\r\n    partial:\r\n      top < window.pageYOffset + window.innerHeight &&\r\n      left < window.pageXOffset + window.innerWidth &&\r\n      top + height > window.pageYOffset &&\r\n      left + width > window.pageXOffset,\r\n  };\r\n};\r\n\r\nconst breakpoints = {\r\n  xs: 0,\r\n  sm: 576,\r\n  md: 768,\r\n  lg: 992,\r\n  xl: 1200,\r\n  xxl: 1540,\r\n};\r\n\r\nconst getBreakpoint = (el) => {\r\n  const classes = el && el.classList.value;\r\n  let breakpoint;\r\n  if (classes) {\r\n    breakpoint =\r\n      breakpoints[\r\n        classes\r\n          .split(\" \")\r\n          .filter((cls) => cls.includes(\"navbar-expand-\"))\r\n          .pop()\r\n          .split(\"-\")\r\n          .pop()\r\n      ];\r\n  }\r\n  return breakpoint;\r\n};\r\n\r\n/* --------------------------------- Cookie --------------------------------- */\r\n\r\nconst setCookie = (name, value, expire) => {\r\n  const expires = new Date();\r\n  expires.setTime(expires.getTime() + expire);\r\n  document.cookie = name + \"=\" + value + \";expires=\" + expires.toUTCString();\r\n};\r\n\r\nconst getCookie = (name) => {\r\n  var keyValue = document.cookie.match(\"(^|;) ?\" + name + \"=([^;]*)(;|$)\");\r\n  return keyValue ? keyValue[2] : keyValue;\r\n};\r\n\r\nconst settings = {\r\n  tinymce: {\r\n    theme: \"oxide\",\r\n  },\r\n  chart: {\r\n    borderColor: \"rgba(255, 255, 255, 0.8)\",\r\n  },\r\n};\r\n\r\n/* -------------------------- Chart Initialization -------------------------- */\r\n\r\nconst newChart = (chart, config) => {\r\n  const ctx = chart.getContext(\"2d\");\r\n  return new window.Chart(ctx, config);\r\n};\r\n\r\n/* ---------------------------------- Store --------------------------------- */\r\n\r\nconst getItemFromStore = (key, defaultValue, store = localStorage) => {\r\n  try {\r\n    return JSON.parse(store.getItem(key)) || defaultValue;\r\n  } catch {\r\n    return store.getItem(key) || defaultValue;\r\n  }\r\n};\r\n\r\nconst setItemToStore = (key, payload, store = localStorage) =>\r\n  store.setItem(key, payload);\r\nconst getStoreSpace = (store = localStorage) =>\r\n  parseFloat(\r\n    (\r\n      escape(encodeURIComponent(JSON.stringify(store))).length /\r\n      (1024 * 1024)\r\n    ).toFixed(2)\r\n  );\r\n\r\nconst utils = {\r\n  docReady,\r\n  resize,\r\n  isIterableArray,\r\n  camelize,\r\n  getData,\r\n  hasClass,\r\n  addClass,\r\n  hexToRgb,\r\n  rgbaColor,\r\n  colors,\r\n  grays,\r\n  getOffset,\r\n  isScrolledIntoView,\r\n  getBreakpoint,\r\n  setCookie,\r\n  getCookie,\r\n  newChart,\r\n  settings,\r\n  getItemFromStore,\r\n  setItemToStore,\r\n  getStoreSpace,\r\n};\r\nexport default utils;\r\n","import { getItemFromStore } from './utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                             Live Configuration                             */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst isFluid = getItemFromStore('isFluid', false);\r\nconst isRTL = getItemFromStore('isRTL', false);\r\nconst navbarPosition = getItemFromStore('navbarPosition', 'vertical');\r\nconst navbarStyle = getItemFromStore('navbarStyle', 'transparent');\r\n\r\nconst setCheckInputValue = (id, value) => {\r\n  const input = document.getElementById(id);\r\n  input && (input.checked = value);\r\n};\r\n\r\nsetCheckInputValue('mode-fluid', isFluid);\r\nsetCheckInputValue('mode-rtl', isRTL);\r\nsetCheckInputValue(`option-navbar-${navbarPosition}`, true);\r\nsetCheckInputValue(`navbar-style-${navbarStyle}`, true);\r\n\r\nif (navbarPosition === 'top') {\r\n  const buttonGroups = document.querySelector('.btn-group-navbar-style');\r\n  buttonGroups &&\r\n    buttonGroups.querySelectorAll('.btn-check').forEach((input) => {\r\n      input.setAttribute('disabled', true);\r\n    });\r\n}\r\n\r\nconst storage = {\r\n  isRTL,\r\n  isFluid,\r\n};\r\nexport default storage;\r\n","import { addClass } from './utils';\r\n/* -------------------------------------------------------------------------- */\r\n/*                                  Detector                                  */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst detectorInit = () => {\r\n  const { is } = window;\r\n  const html = document.querySelector('html');\r\n\r\n  is.opera() && addClass(html, 'opera');\r\n  is.mobile() && addClass(html, 'mobile');\r\n  is.firefox() && addClass(html, 'firefox');\r\n  is.safari() && addClass(html, 'safari');\r\n  is.ios() && addClass(html, 'ios');\r\n  is.iphone() && addClass(html, 'iphone');\r\n  is.ipad() && addClass(html, 'ipad');\r\n  is.ie() && addClass(html, 'ie');\r\n  is.edge() && addClass(html, 'edge');\r\n  is.chrome() && addClass(html, 'chrome');\r\n  is.mac() && addClass(html, 'osx');\r\n  is.windows() && addClass(html, 'windows');\r\n  navigator.userAgent.match('CriOS') && addClass(html, 'chrome');\r\n};\r\n\r\nexport default detectorInit;\r\n","/*-----------------------------------------------\r\n|   Node\r\n-----------------------------------------------*/\r\nclass Node {\r\n  constructor(node) {\r\n    this.node = node;\r\n  }\r\n\r\n  addClass(className) {\r\n    this.isValidNode() && this.node.classList.add(className);\r\n  }\r\n\r\n  removeClass(className) {\r\n    this.isValidNode() && this.node.classList.remove(className);\r\n  }\r\n\r\n  toggleClass(className) {\r\n    this.isValidNode() && this.node.classList.toggle(className);\r\n  }\r\n\r\n  hasClass(className) {\r\n    this.isValidNode() && this.node.classList.contains(className);\r\n  }\r\n\r\n  data(key) {\r\n    if (this.isValidNode()) {\r\n      try {\r\n        return JSON.parse(this.node.dataset[this.camelize(key)]);\r\n      } catch (e) {\r\n        return this.node.dataset[this.camelize(key)];\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  attr(name) {\r\n    return this.isValidNode() && this.node[name];\r\n  }\r\n\r\n  setAttribute(name, value) {\r\n    this.isValidNode() && this.node.setAttribute(name, value);\r\n  }\r\n\r\n  removeAttribute(name) {\r\n    this.isValidNode() && this.node.removeAttribute(name);\r\n  }\r\n\r\n  setProp(name, value) {\r\n    this.isValidNode() && (this.node[name] = value);\r\n  }\r\n\r\n  on(event, cb) {\r\n    this.isValidNode() && this.node.addEventListener(event, cb);\r\n  }\r\n\r\n  isValidNode() {\r\n    return !!this.node;\r\n  }\r\n\r\n  // eslint-disable-next-line class-methods-use-this\r\n  camelize(str) {\r\n    const text = str.replace(/[-_\\s.]+(.)?/g, (_, c) => (c ? c.toUpperCase() : ''));\r\n    return `${text.substr(0, 1).toLowerCase()}${text.substr(1)}`;\r\n  }\r\n}\r\n\r\nexport default Node;\r\n","/* -------------------------------------------------------------------------- */\r\n/*                                  Anchor JS                                 */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst anchors = new window.AnchorJS();\r\nanchors.options = {\r\n  icon: '#',\r\n};\r\nanchors.add('[data-anchor]');\r\n","import utils from './utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                                   choices                                   */\r\n/* -------------------------------------------------------------------------- */\r\nconst choicesInit = () => {\r\n  if (window.Choices) {\r\n    const elements = document.querySelectorAll('.js-choice');\r\n    elements.forEach((item) => {\r\n      const userOptions = utils.getData(item, 'options');\r\n      const choices = new window.Choices(item, {\r\n        itemSelectText: '',\r\n        ...userOptions,\r\n      });\r\n\r\n      return choices;\r\n    });\r\n  }\r\n};\r\n\r\nexport default choicesInit;\r\n","/* -------------------------------------------------------------------------- */\r\n/*                                   Kanbah                                   */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nimport utils from './utils';\r\n\r\nconst kanbanInit = () => {\r\n  const Selectors = {\r\n    KANBAN_COLUMN: '.kanban-column',\r\n    KANBAN_ITEMS_CONTAINER: '.kanban-items-container',\r\n    BTN_ADD_CARD: '.btn-add-card',\r\n    COLLAPSE: '.collapse',\r\n    ADD_LIST_FORM: '#addListForm',\r\n    BTN_COLLAPSE_DISMISS: '[data-dismiss=\"collapse\"]',\r\n    BTN_FORM_HIDE: '[data-btn-form=\"hide\"]',\r\n    INPUT_ADD_CARD: '[data-input=\"add-card\"]',\r\n    INPUT_ADD_LIST: '[data-input=\"add-list\"]',\r\n  };\r\n\r\n  const ClassNames = {\r\n    FORM_ADDED: 'form-added',\r\n    D_NONE: 'd-none',\r\n  };\r\n\r\n  const Events = {\r\n    CLICK: 'click',\r\n    SHOW_BS_COLLAPSE: 'show.bs.collapse',\r\n    SHOWN_BS_COLLAPSE: 'shown.bs.collapse',\r\n  };\r\n\r\n  const addCardButtons = document.querySelectorAll(Selectors.BTN_ADD_CARD);\r\n  const formHideButtons = document.querySelectorAll(Selectors.BTN_FORM_HIDE);\r\n  const addListForm = document.querySelector(Selectors.ADD_LIST_FORM);\r\n  const collapseDismissButtons = document.querySelectorAll(\r\n    Selectors.BTN_COLLAPSE_DISMISS\r\n  );\r\n\r\n  // Show add card form and place scrollbar bottom of the list\r\n  addCardButtons &&\r\n    addCardButtons.forEach((button) => {\r\n      button.addEventListener(Events.CLICK, ({ currentTarget: el }) => {\r\n        const column = el.closest(Selectors.KANBAN_COLUMN);\r\n        const container = column.querySelector(\r\n          Selectors.KANBAN_ITEMS_CONTAINER\r\n        );\r\n        const scrollHeight = container.scrollHeight;\r\n\r\n        column.classList.add(ClassNames.FORM_ADDED);\r\n        container.querySelector(Selectors.INPUT_ADD_CARD).focus();\r\n        container.scrollTo({ top: scrollHeight });\r\n      });\r\n    });\r\n\r\n  // Remove add card form\r\n  formHideButtons.forEach((button) => {\r\n    button.addEventListener(Events.CLICK, ({ currentTarget: el }) => {\r\n      el.closest(Selectors.KANBAN_COLUMN).classList.remove(\r\n        ClassNames.FORM_ADDED\r\n      );\r\n    });\r\n  });\r\n\r\n  if (addListForm) {\r\n    // Hide add list button when the form is going to show\r\n    addListForm.addEventListener(\r\n      Events.SHOW_BS_COLLAPSE,\r\n      ({ currentTarget: el }) => {\r\n        const nextElement = el.nextElementSibling;\r\n        nextElement && nextElement.classList.add(ClassNames.D_NONE);\r\n      }\r\n    );\r\n\r\n    // Focus input field when the form is shown\r\n    addListForm.addEventListener(\r\n      Events.SHOWN_BS_COLLAPSE,\r\n      ({ currentTarget: el }) => {\r\n        el.querySelector(Selectors.INPUT_ADD_LIST).focus();\r\n      }\r\n    );\r\n  }\r\n\r\n  // Hide add list form when the dismiss button is clicked\r\n  collapseDismissButtons.forEach((button) => {\r\n    button.addEventListener(Events.CLICK, ({ currentTarget: el }) => {\r\n      const collapseElement = el.closest(Selectors.COLLAPSE);\r\n      const collapse = window.bootstrap.Collapse.getInstance(collapseElement);\r\n\r\n      utils.hasClass(collapseElement.nextElementSibling, ClassNames.D_NONE) &&\r\n        collapseElement.nextElementSibling.classList.remove(ClassNames.D_NONE);\r\n      collapse.hide();\r\n    });\r\n  });\r\n};\r\n\r\nexport default kanbanInit;\r\n","import { docReady, setItemToStore } from './utils';\r\nimport { isRTL, isFluid } from './live-config';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                         Toggle layout for live demo                        */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst toggleLayout = (id, key, value) => {\r\n  const input = document.getElementById(id);\r\n\r\n  input &&\r\n    input.addEventListener('change', () => {\r\n      setItemToStore(key, !value);\r\n      window.location.reload();\r\n    });\r\n};\r\n\r\nconst toggleNavbar = (selector, key) => {\r\n  const checkInputs = document.querySelectorAll(selector);\r\n  checkInputs.forEach((input) => {\r\n    input.addEventListener('change', (e) => {\r\n      const { value } = e.currentTarget;\r\n      setItemToStore(key, value);\r\n      window.location.reload();\r\n    });\r\n  });\r\n};\r\n\r\ndocReady(toggleLayout('mode-rtl', 'isRTL', isRTL));\r\ndocReady(toggleLayout('mode-fluid', 'isFluid', isFluid));\r\ndocReady(toggleNavbar(\"input[name='navbar']\", 'navbarPosition'));\r\ndocReady(toggleNavbar(\"input[name='navbarStyle']\", 'navbarStyle'));\r\n","import utils from './utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                             Navbar Combo Layout                            */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst navbarComboInit = () => {\r\n  const Selector = {\r\n    NAVBAR_VERTICAL: '.navbar-vertical',\r\n    NAVBAR_TOP_COMBO: '[data-navbar-top=\"combo\"]',\r\n    COLLAPSE: '.collapse',\r\n    DATA_MOVE_CONTAINER: '[data-move-container]',\r\n    NAVBAR_NAV: '.navbar-nav',\r\n    NAVBAR_VERTICAL_DIVIDER: '.navbar-vertical-divider',\r\n  };\r\n\r\n  const ClassName = {\r\n    FLEX_COLUMN: 'flex-column',\r\n  };\r\n\r\n  const navbarVertical = document.querySelector(Selector.NAVBAR_VERTICAL);\r\n  const navbarTopCombo = document.querySelector(Selector.NAVBAR_TOP_COMBO);\r\n\r\n  const moveNavContent = (windowWidth) => {\r\n    const navbarVerticalBreakpoint = utils.getBreakpoint(navbarVertical);\r\n    const navbarTopBreakpoint = utils.getBreakpoint(navbarTopCombo);\r\n\r\n    if (windowWidth < navbarTopBreakpoint) {\r\n      const navbarCollapse = navbarTopCombo.querySelector(Selector.COLLAPSE);\r\n      const navbarTopContent = navbarCollapse.innerHTML;\r\n\r\n      if (navbarTopContent) {\r\n        const targetID = utils.getData(navbarTopCombo, 'move-target');\r\n        const targetElement = document.querySelector(targetID);\r\n\r\n        navbarCollapse.innerHTML = '';\r\n        targetElement.insertAdjacentHTML(\r\n          'afterend',\r\n          `\r\n            <div data-move-container>\r\n              <div class='navbar-vertical-divider'>\r\n                <hr class='navbar-vertical-hr' />\r\n              </div>\r\n              ${navbarTopContent}\r\n            </div>\r\n          `\r\n        );\r\n\r\n        if (navbarVerticalBreakpoint < navbarTopBreakpoint) {\r\n          const navbarNav = document\r\n            .querySelector(Selector.DATA_MOVE_CONTAINER)\r\n            .querySelector(Selector.NAVBAR_NAV);\r\n          utils.addClass(navbarNav, ClassName.FLEX_COLUMN);\r\n        }\r\n      }\r\n    } else {\r\n      const moveableContainer = document.querySelector(\r\n        Selector.DATA_MOVE_CONTAINER\r\n      );\r\n      if (moveableContainer) {\r\n        const navbarNav = moveableContainer.querySelector(Selector.NAVBAR_NAV);\r\n        utils.hasClass(navbarNav, ClassName.FLEX_COLUMN) &&\r\n          navbarNav.classList.remove(ClassName.FLEX_COLUMN);\r\n        moveableContainer\r\n          .querySelector(Selector.NAVBAR_VERTICAL_DIVIDER)\r\n          .remove();\r\n        navbarTopCombo.querySelector(Selector.COLLAPSE).innerHTML =\r\n          moveableContainer.innerHTML;\r\n        moveableContainer.remove();\r\n      }\r\n    }\r\n  };\r\n\r\n  moveNavContent(window.innerWidth);\r\n\r\n  utils.resize(() => moveNavContent(window.innerWidth));\r\n};\r\n\r\nexport default navbarComboInit;\r\n","import utils from './utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                         Navbar Darken on scroll                        */\r\n/* -------------------------------------------------------------------------- */\r\nconst navbarDarkenOnScroll = () => {\r\n  const Selector = {\r\n    NAVBAR: '[data-navbar-darken-on-scroll]',\r\n    NAVBAR_COLLAPSE: '.navbar-collapse',\r\n    NAVBAR_TOGGLER: '.navbar-toggler',\r\n  };\r\n\r\n  const ClassNames = {\r\n    COLLAPSED: 'collapsed',\r\n  };\r\n\r\n  const Events = {\r\n    SCROLL: 'scroll',\r\n    SHOW_BS_COLLAPSE: 'show.bs.collapse',\r\n    HIDE_BS_COLLAPSE: 'hide.bs.collapse',\r\n    HIDDEN_BS_COLLAPSE: 'hidden.bs.collapse',\r\n  };\r\n\r\n  const DataKey = {\r\n    NAVBAR_DARKEN_ON_SCROLL: 'navbar-darken-on-scroll'\r\n  };\r\n\r\n  const navbar = document.querySelector(Selector.NAVBAR);\r\n\r\n  if (navbar) {\r\n    const windowHeight = window.innerHeight;\r\n    const html = document.documentElement;\r\n    const navbarCollapse = navbar.querySelector(Selector.NAVBAR_COLLAPSE);\r\n    const allColors = { ...utils.colors, ...utils.grays };\r\n\r\n    const name = utils.getData(navbar, DataKey.NAVBAR_DARKEN_ON_SCROLL);\r\n    const colorName = Object.keys(allColors).includes(name) ? name : 'dark';\r\n    const color = allColors[colorName];\r\n    const bgClassName = `bg-${colorName}`;\r\n    const colorRgb = utils.hexToRgb(color);\r\n    const { backgroundImage } = window.getComputedStyle(navbar);\r\n    const transition = 'background-color 0.35s ease';\r\n\r\n    navbar.style.backgroundImage = 'none';\r\n\r\n    // Change navbar background color on scroll\r\n    window.addEventListener(Events.SCROLL, () => {\r\n      const { scrollTop } = html;\r\n      let alpha = (scrollTop / windowHeight) * 2;\r\n      alpha >= 1 && (alpha = 1);\r\n      navbar.style.backgroundColor = `rgba(${colorRgb[0]}, ${colorRgb[1]}, ${colorRgb[2]}, ${alpha})`;\r\n      navbar.style.backgroundImage = (alpha > 0 || utils.hasClass(navbarCollapse, 'show')) ? backgroundImage : 'none';\r\n    });\r\n\r\n    // Toggle bg class on window resize\r\n    utils.resize(() => {\r\n      const breakPoint = utils.getBreakpoint(navbar);\r\n      if (window.innerWidth > breakPoint) {\r\n        navbar.classList.remove(bgClassName);\r\n        navbar.style.backgroundImage = html.scrollTop ? backgroundImage : 'none';\r\n        navbar.style.transition = 'none';\r\n      } else if (\r\n        !utils.hasClass(\r\n          navbar.querySelector(Selector.NAVBAR_TOGGLER),\r\n          ClassNames.COLLAPSED\r\n        )\r\n      ) {\r\n        navbar.classList.add(bgClassName);\r\n        navbar.style.backgroundImage = backgroundImage;\r\n      }\r\n\r\n      if (window.innerWidth <= breakPoint) {\r\n        navbar.style.transition = utils.hasClass(navbarCollapse, 'show') ? transition : 'none';\r\n      }\r\n    });\r\n\r\n    navbarCollapse.addEventListener(Events.SHOW_BS_COLLAPSE, () => {\r\n      navbar.classList.add(bgClassName);\r\n      navbar.style.backgroundImage = backgroundImage;\r\n      navbar.style.transition = transition;\r\n    });\r\n\r\n    navbarCollapse.addEventListener(Events.HIDE_BS_COLLAPSE, () => {\r\n      navbar.classList.remove(bgClassName);\r\n      !html.scrollTop && (navbar.style.backgroundImage = 'none');\r\n    });\r\n\r\n    navbarCollapse.addEventListener(Events.HIDDEN_BS_COLLAPSE, () => {\r\n      navbar.style.transition = 'none';\r\n    });\r\n  }\r\n};\r\n\r\nexport default navbarDarkenOnScroll;\r\n","import utils from './utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                                 Navbar Top                                 */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst navbarTopDropShadow = () => {\r\n  const Selector = {\r\n    NAVBAR: '.navbar:not(.navbar-vertical)',\r\n    NAVBAR_VERTICAL: '.navbar-vertical',\r\n    NAVBAR_VERTICAL_CONTENT: '.navbar-vertical-content',\r\n    NAVBAR_VERTICAL_COLLAPSE: 'navbarVerticalCollapse',\r\n  };\r\n\r\n  const ClassNames = {\r\n    NAVBAR_GLASS_SHADOW: 'navbar-glass-shadow',\r\n    SHOW: 'show',\r\n  };\r\n\r\n  const Events = {\r\n    SCROLL: 'scroll',\r\n    SHOW_BS_COLLAPSE: 'show.bs.collapse',\r\n    HIDDEN_BS_COLLAPSE: 'hidden.bs.collapse',\r\n  };\r\n  let navDropShadowFlag = true;\r\n\r\n  const $navbar = document.querySelector(Selector.NAVBAR);\r\n  const $navbarVertical = document.querySelector(Selector.NAVBAR_VERTICAL);\r\n  const $navbarVerticalContent = document.querySelector(\r\n    Selector.NAVBAR_VERTICAL_CONTENT\r\n  );\r\n  const $navbarVerticalCollapse = document.getElementById(\r\n    Selector.NAVBAR_VERTICAL_COLLAPSE\r\n  );\r\n  const html = document.documentElement;\r\n  const breakPoint = utils.getBreakpoint($navbarVertical);\r\n  const setDropShadow = ($elem) => {\r\n    if ($elem.scrollTop > 0 && navDropShadowFlag) {\r\n      $navbar && $navbar.classList.add(ClassNames.NAVBAR_GLASS_SHADOW);\r\n    } else {\r\n      $navbar && $navbar.classList.remove(ClassNames.NAVBAR_GLASS_SHADOW);\r\n    }\r\n  };\r\n\r\n  window.addEventListener(Events.SCROLL, () => {\r\n    setDropShadow(html);\r\n  });\r\n  if ($navbarVerticalContent) {\r\n    $navbarVerticalContent.addEventListener(Events.SCROLL, () => {\r\n      if (window.outerWidth < breakPoint) {\r\n        navDropShadowFlag = true;\r\n        setDropShadow($navbarVerticalContent);\r\n      }\r\n    });\r\n  }\r\n  if ($navbarVerticalCollapse) {\r\n    $navbarVerticalCollapse.addEventListener(Events.SHOW_BS_COLLAPSE, () => {\r\n      if (window.outerWidth < breakPoint) {\r\n        navDropShadowFlag = false;\r\n        setDropShadow(html);\r\n      }\r\n    });\r\n  }\r\n  if ($navbarVerticalCollapse) {\r\n    $navbarVerticalCollapse.addEventListener(Events.HIDDEN_BS_COLLAPSE, () => {\r\n      if (\r\n        utils.hasClass($navbarVerticalCollapse, ClassNames.SHOW) &&\r\n        window.outerWidth < breakPoint\r\n      ) {\r\n        navDropShadowFlag = false;\r\n      } else {\r\n        navDropShadowFlag = true;\r\n      }\r\n      setDropShadow(html);\r\n    });\r\n  }\r\n};\r\n\r\nexport default navbarTopDropShadow;\r\n","import utils from './utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                               Navbar Vertical                              */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst handleNavbarVerticalCollapsed = () => {\r\n  const Selector = {\r\n    HTML: 'html',\r\n    NAVBAR_VERTICAL_TOGGLE: '.navbar-vertical-toggle',\r\n    NAVBAR_VERTICAL_COLLAPSE: '.navbar-vertical .navbar-collapse',\r\n    ECHART_RESPONSIVE: '[data-echart-responsive]',\r\n  };\r\n\r\n  const Events = {\r\n    CLICK: 'click',\r\n    MOUSE_OVER: 'mouseover',\r\n    MOUSE_LEAVE: 'mouseleave',\r\n    NAVBAR_VERTICAL_TOGGLE: 'navbar.vertical.toggle',\r\n  };\r\n  const ClassNames = {\r\n    NAVBAR_VERTICAL_COLLAPSED: 'navbar-vertical-collapsed',\r\n    NAVBAR_VERTICAL_COLLAPSED_HOVER: 'navbar-vertical-collapsed-hover',\r\n  };\r\n  const navbarVerticalToggle = document.querySelector(\r\n    Selector.NAVBAR_VERTICAL_TOGGLE\r\n  );\r\n  const html = document.querySelector(Selector.HTML);\r\n  const navbarVerticalCollapse = document.querySelector(\r\n    Selector.NAVBAR_VERTICAL_COLLAPSE\r\n  );\r\n\r\n  if (navbarVerticalToggle) {\r\n    navbarVerticalToggle.addEventListener(Events.CLICK, (e) => {\r\n      html.classList.toggle(ClassNames.NAVBAR_VERTICAL_COLLAPSED);\r\n\r\n      // Set collapse state on localStorage\r\n      const isNavbarVerticalCollapsed = utils.getItemFromStore(\r\n        'isNavbarVerticalCollapsed'\r\n      );\r\n      utils.setItemToStore(\r\n        'isNavbarVerticalCollapsed',\r\n        !isNavbarVerticalCollapsed\r\n      );\r\n\r\n      const event = new CustomEvent(Events.NAVBAR_VERTICAL_TOGGLE);\r\n      e.currentTarget.dispatchEvent(event);\r\n    });\r\n  }\r\n  if (navbarVerticalCollapse) {\r\n    navbarVerticalCollapse.addEventListener(Events.MOUSE_OVER, () => {\r\n      if (utils.hasClass(html, ClassNames.NAVBAR_VERTICAL_COLLAPSED)) {\r\n        html.classList.add(ClassNames.NAVBAR_VERTICAL_COLLAPSED_HOVER);\r\n      }\r\n    });\r\n    navbarVerticalCollapse.addEventListener(Events.MOUSE_LEAVE, () => {\r\n      if (utils.hasClass(html, ClassNames.NAVBAR_VERTICAL_COLLAPSED_HOVER)) {\r\n        html.classList.remove(ClassNames.NAVBAR_VERTICAL_COLLAPSED_HOVER);\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\nexport default handleNavbarVerticalCollapsed;\r\n","/* -------------------------------------------------------------------------- */\r\n/*                                   Popover                                  */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst popoverInit = () => {\r\n  const popoverTriggerList = [].slice.call(\r\n    document.querySelectorAll('[data-toggle=\"popover\"]')\r\n  );\r\n  popoverTriggerList.map((popoverTriggerEl) => {\r\n    return new window.bootstrap.Popover(popoverTriggerEl, {\r\n      trigger: 'focus',\r\n    });\r\n  });\r\n};\r\n\r\nexport default popoverInit;\r\n","import utils from './utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                         Bootstrap Animated Progress                        */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst progressAnimationToggle = () => {\r\n  const animatedProgress = document.querySelectorAll(\r\n    '[data-progress-animation]'\r\n  );\r\n\r\n  animatedProgress.forEach((progress) => {\r\n    progress.addEventListener('click', (e) => {\r\n      const progressID = utils.getData(e.currentTarget, 'progressAnimation');\r\n      const $progress = document.getElementById(progressID);\r\n      $progress.classList.toggle('progress-bar-animated');\r\n    });\r\n  });\r\n};\r\n\r\nexport default progressAnimationToggle;\r\n","import utils from './utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                                Scroll To Top                               */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst scrollToTop = () => {\r\n  document\r\n    .querySelectorAll('[data-anchor] > a, [data-scroll-to]')\r\n    .forEach((anchor) => {\r\n      anchor.addEventListener('click', (e) => {\r\n        e.preventDefault();\r\n        const el = e.target;\r\n        const id = utils.getData(el, 'scroll-to') || el.getAttribute('href');\r\n        window.scroll({\r\n          top:\r\n            utils.getData(el, 'offset-top') ??\r\n            utils.getOffset(document.querySelector(id)).top - 100,\r\n          left: 0,\r\n          behavior: 'smooth',\r\n        });\r\n        window.location.hash = id;\r\n      });\r\n    });\r\n};\r\n\r\nexport default scrollToTop;\r\n","/* -------------------------------------------------------------------------- */\r\n/*                                   Tooltip                                  */\r\n/* -------------------------------------------------------------------------- */\r\nconst tooltipInit = () => {\r\n  const tooltipTriggerList = [].slice.call(\r\n    document.querySelectorAll('[data-toggle=\"tooltip\"]')\r\n  );\r\n\r\n  tooltipTriggerList.map(\r\n    (tooltipTriggerEl) => new window.bootstrap.Tooltip(tooltipTriggerEl)\r\n  );\r\n};\r\n\r\nexport default tooltipInit;\r\n","const wizardInit = () => {\r\n  const tabEl = document.querySelectorAll('.theme-wizard a[data-toggle=\"tab\"]');\r\n  if (tabEl.length) {\r\n    const nextButton = document.querySelector(\".next\");\r\n    const prevButton = document.querySelector(\".previous button\");\r\n    const cardFooter = document.querySelector(\".theme-wizard .card-footer\");\r\n    let count = 0;\r\n\r\n    prevButton.classList.add(\"d-none\");\r\n\r\n    // on button click tab change\r\n    nextButton.addEventListener(\"click\", () => {\r\n      count = count + 1;\r\n      const tab = new window.bootstrap.Tab(tabEl[count]);\r\n      tab.show();\r\n    });\r\n\r\n    prevButton.addEventListener(\"click\", () => {\r\n      count = count - 1;\r\n      const tab = new window.bootstrap.Tab(tabEl[count]);\r\n      tab.show();\r\n    });\r\n\r\n    tabEl.forEach((item, index) => {\r\n      item.addEventListener(\"show.bs.tab\", () => {\r\n        count = index;\r\n        // cant go back tab\r\n        if (count === tabEl.length - 1) {\r\n          tabEl.forEach((tab) => {\r\n            tab.setAttribute(\"data-toggle\", \"modal\");\r\n            tab.setAttribute(\"data-target\", \"#error-modal\");\r\n          });\r\n        }\r\n        //add done class\r\n        for (let i = 0; i < count; i = i + 1) {\r\n          tabEl[i].classList.add(\"done\");\r\n        }\r\n        //remove done class\r\n        for (let j = count; j < tabEl.length; j = j + 1) {\r\n          tabEl[j].classList.remove(\"done\");\r\n        }\r\n        if (count > tabEl.length - 2) {\r\n          item.classList.add(\"done\");\r\n          cardFooter.classList.add(\"d-none\");\r\n        } else {\r\n          cardFooter.classList.remove(\"d-none\");\r\n        }\r\n        if (count > 0) {\r\n          prevButton.classList.remove(\"d-none\");\r\n        } else {\r\n          prevButton.classList.add(\"d-none\");\r\n        }\r\n      });\r\n    });\r\n  }\r\n};\r\n\r\nexport default wizardInit;\r\n"]}